
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "boots.lmer"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "boots.lmer-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('boots.lmer')
Loading required package: data.table
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("boots.lmer")
> ### * boots.lmer
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: boots.lmer
> ### Title: Bootstrap Sampled Linear Mixed Effects Models (LMERs)
> ### Aliases: boots.lmer
> 
> ### ** Examples
> 
> example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
> example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
+                         "X1"=rpois(n=length(example.subject), lambda = 3),
+                         "X2"=rnorm(n=length(example.subject)),
+                         "X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
+                         "subjects"=example.subject)
> output<-boots.samples(dat=example.dat,sub.id = "subjects",B=4) #create 4 bootstrap samples
> lmer.out<-boots.lmer(y="Y", X=c("X1","X2","X3"), boots.samples.list = output)
Warning in parallel::mclapply(boots.samples.list, function(boots.dat) { :
  all scheduled cores encountered errors in user code
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("boots.lmer", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("boots.samples")
> ### * boots.samples
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: boots.samples
> ### Title: Bootstrap Samples
> ### Aliases: boots.samples
> 
> ### ** Examples
> 
> example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
> example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
+                         "X1"=rpois(n=length(example.subject), lambda = 3),
+                         "X2"=rnorm(n=length(example.subject)),
+                         "X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
+                         "subjects"=example.subject)
> output<-boots.samples(dat=example.dat,sub.id = "subjects",B=4) #create 4 bootstrap samples
> output[[1]] #This is the first one!
              Y X1          X2        X3 subjects no.repeat.sub.id
8     0.7383247  2  0.07456498 0.8347973    Blake         Blake__1
4     1.5952808  1  0.82122120 0.9583633     Anna          Anna__1
10   -0.3053884  2  0.61982575 0.8323575     Anna          Anna__1
8.1   0.7383247  2  0.07456498 0.8347973    Blake         Blake__2
3    -0.8356286  4  0.94383621 0.5621375     Beth             Beth
1    -0.6264538  6 -0.04493361 0.8337716    Sarah            Sarah
5     0.3295078  2  0.59390132 0.9984842    Sarah            Sarah
6    -0.8204684  2  0.91897737 0.8120751    Sarah            Sarah
4.1   1.5952808  1  0.82122120 0.9583633     Anna          Anna__2
10.1 -0.3053884  2  0.61982575 0.8323575     Anna          Anna__2
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("boots.samples", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.207 0.028 0.357 0.183 0.047 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
