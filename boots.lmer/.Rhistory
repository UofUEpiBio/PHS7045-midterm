lmer.out<-boots.lmer(y="Y", X=c("X1","X2","X3"), boots.samples.list = output[1:46])
lmer.out<-boots.lmer(y="Y", X=c("X1","X2","X3"), boots.samples.list = output[1:45])
output[46]
library(boots.lmer)
library(boots.lmer)
set.seed(1020)
example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
"X1"=rpois(n=length(example.subject), lambda = 3),
"X2"=rnorm(n=length(example.subject)),
"X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
"subjects"=example.subject) #generate example data
output<-boots.samples(dat=example.dat,sub.id ="subjects",B=4) #a list of 4 bootstrap samples
set.seed(1204)
output<-boots.samples(dat=example.dat,sub.id ="subjects",B=5000)
library(boots.lmer)
library(boots.lmer)
set.seed(1020)
example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
"X1"=rpois(n=length(example.subject), lambda = 3),
"X2"=rnorm(n=length(example.subject)),
"X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
"subjects"=example.subject) #generate example data
output<-boots.samples(dat=example.dat,sub.id ="subjects",B=4) #a list of 4 bootstrap samples
lmer.out<-boots.lmer(y="Y", X=c("X1","X2","X3"), boots.samples.list = output)
lmer.out
set.seed(1204)
output<-boots.samples(dat=example.dat,sub.id ="subjects",B=5000)
lmer.out<-boots.lmer(y="Y", X=c("X1","X2","X3"), boots.samples.list = output)
lmer.out[5000]
lmer.out1<-boots.lmer(y="Y", X=c("X1","X2","X3"), boots.samples.list = output[[100]])
library(boots.lmer)
library(boots.lmer)
library(boots.lmer)
output
set.seed(1020)
example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
"X1"=rpois(n=length(example.subject), lambda = 3),
"X2"=rnorm(n=length(example.subject)),
"X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
"subjects"=example.subject)
knitr::kable(example.dat, caption = "Table 1. Example data set.")
output<-boots.samples(dat = example.dat, sub.id = "subjects",B=4)
output
output
??boots.lmer
usethis::use_vignette("vignette")
library(boots.lmer)
library(boots.lmer)
??boots.lmer
install.packages("../boots.lmer_0.0.0.9000.tar.gz")
install.packages("../boots.lmer_0.0.0.9000.tar.gz")
library(boots.lmer)
set.seed(1020)
example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
"X1"=rpois(n=length(example.subject), lambda = 3),
"X2"=rnorm(n=length(example.subject)),
"X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
"subjects"=example.subject) #generate example data
output<-boots.samples(dat=example.dat,sub.id ="subjects",B=4) #a list of 4 bootstrap samples
lmer.out<-boots.lmer(y="Y", X=c("X1","X2","X3"), boots.samples.list = output)
lmer.out
lmer.out1<-boots.lmer(y="Y", X=c("X1","X2","X3"), boots.samples.list = output[[62]])
set.seed(1204)
output<-boots.samples(dat=example.dat,sub.id ="subjects",B=5000)
lmer.out1<-boots.lmer(y="Y", X=c("X1","X2","X3"), boots.samples.list = output[[62]])
this.fit<-(lme4::lmer(Y ~ X1 + X2 + X3 + (1 | no.repeat.sub.id), dat=output[[62]],REML=FALSE))
View(output[[62]])
this.fit<-(lme4::lmer(Y ~ X1 + X2 + (1 | no.repeat.sub.id), dat=output[[62]],REML=FALSE))
this.fit
set.seed(1020)
example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
"X1"=rpois(n=length(example.subject), lambda = 3),
"X2"=rnorm(n=length(example.subject)),
"X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5)+rnorm(length(exmaple.subject), mean=6),
"subjects"=example.subject) #generate example data
set.seed(1020)
example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
"X1"=rpois(n=length(example.subject), lambda = 3),
"X2"=rnorm(n=length(example.subject)),
"X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5)+rnorm(length(example.subject), mean=6),
"subjects"=example.subject) #generate example data
output<-boots.samples(dat=example.dat,sub.id ="subjects",B=4) #a list of 4 bootstrap samples
lmer.out<-boots.lmer(y="Y", X=c("X1","X2","X3"), boots.samples.list = output)
lmer.out
set.seed(1204)
output<-boots.samples(dat=example.dat,sub.id ="subjects",B=5000)
lmer.out1<-boots.lmer(y="Y", X=c("X1","X2","X3"), boots.samples.list = output)
summary(lmer.out[[1]])
coef.out<-
lapply(lmer.out,function(fit){
if(class(fit)=="lm"){ #If linear model was fit, use below function
coef(lmer.out[[46]])
}else{ #IF
lme4::fixef(lmer.out[[46]])
}
})
coef.out<-
lapply(lmer.out,function(fit){
if(class(fit)=="lm"){ #If linear model was fit, use below function
coef(fit)
}else{ #IF
lme4::fixef(fit)
}
})
length(coef.out)
lmer.out<-boots.lmer(y="Y", X=c("X1","X2","X3"), boots.samples.list = output)
coef.out<-
lapply(lmer.out,function(fit){
if(class(fit)=="lm"){ #If linear model was fit, use below function
coef(fit)
}else{ #IF
lme4::fixef(fit)
}
})
length(coef.out)
coef.out2<-Reduce("rbind",coef.out)
coef.out[[1]]
coef.out[[46]]
class(coef.out[[46]])
coef.out2<-do.call(rbind,coef.out)
coef.out[[27]]
output[[27]]
lmer.out[[27]]
which(is.na(this.X3))
#extract coefficient estimate for X3
this.X3<-
lapply(coef.out,function(x){
x["X3"]
})
#Here are all NA's
sum(is.na(this.X3))
which(is.na(this.X3))
lmer.out[[27]]
hist(this.X3)
this.X3
est.X3<-unlist(this.X3)
#extract coefficient estimate for X3
this.X3<-
lapply(coef.out,function(x){
x["X3"]
})
est.X3<-unlist(this.X3)
#Here the number of NA's
sum(is.na(est.X3))
#index of all whose estimated effect of X3 is NA
which(is.na(est.X3))
hist(est.X3)
?boots.lmer
install.packages("../boots.lmer_0.0.0.9000.tar.gz")
install.packages("../boots.lmer_0.0.0.9000.tar.gz")
example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
"X1"=rpois(n=length(example.subject), lambda = 3),
"X2"=rnorm(n=length(example.subject)),
"X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
"subjects"=example.subject)
dat=example.dat
sub.id = "subjects"
B=4
sub.id<-dat[,sub.id]
sub.id
#collect unique subject ID's
unique.id<-unique(sub.id)
#sample unique subject ID, B number of times
this.index<-sapply(1:B,function(e){sample(unique.id, size = length(unique.id),replace = TRUE)})
#we need to take a note of people who are sampled more than once to make sure that they are sampled from the data as if they are different individuals.
no.repeat.id<-
apply(this.index,2, function(x){
temp<-table(x)
for(i in seq_along(temp)){
if(temp[i]>1){ #if the subject id appears more than once
num.appearance<-temp[i] #number of times the subject appears in the sample
x[which(x==names(temp)[i])]<-paste0(names(temp)[i],"__",1:num.appearance) #generate new subject ID by concatenating "_#" at the end of the id. Replace the old name with this
}
}
x #return the list of sampled subject ID , now all sample should be unique subject ID.
})
no.repeat.id
output<-
apply(no.repeat.id,2,function(x){
temp<-
lapply(x,function(x_i){ #for each subject
index<-which(sub.id==stringr::word(x_i,1,sep = "\\__")) #index of original data where the subject id appears
cbind(index, "no.repeat.id"=rep(x_i,length(index)))}) #get all observation for this particular subject.
# temp.dat<-do.call(rbind, lapply(temp, data.frame))
# complete.dat<-dat[temp.dat$index,]
# complete.dat[,"no.repeat.sub.id"]<-temp.dat[,"no.repeat.id"]
# return(complete.dat)
# #bind the index and no.repeat.id. as rows
# temp.dat<-do.call(rbind, lapply(temp, data.table::data.table))
# complete.dat<-data.table::as.data.table(dat[temp.dat$index,])
# # complete.dat[,no.repeat.sub.id:=(temp.dat$no.repeat.id)] # add the new subject ID column, with no repetition
# # complete.dat$no.repeat.sub.id<-temp.dat$no.repeat.id
# complete.dat[,"no.repeat.sub.id"]<-temp.dat$no.repeat.id
# return(complete.dat)
}
)
output
no.repeat.id
x<-no.repeat.id[,1]
x
temp<-
lapply(x,function(x_i){ #for each subject
index<-which(sub.id==stringr::word(x_i,1,sep = "\\__")) #index of original data where the subject id appears
cbind(index, "no.repeat.id"=rep(x_i,length(index)))}) #get all observation for this particular subject.
temp
Reduce("rbind",temp)
output<-
apply(no.repeat.id,2,function(x){
temp<-
lapply(x,function(x_i){ #for each subject
index<-which(sub.id==stringr::word(x_i,1,sep = "\\__")) #index of original data where the subject id appears
cbind(index, "no.repeat.id"=rep(x_i,length(index)))}) #get all observation for this particular subject.
Reduce("rbind",temp)
# temp.dat<-do.call(rbind, lapply(temp, data.frame))
# complete.dat<-dat[temp.dat$index,]
# complete.dat[,"no.repeat.sub.id"]<-temp.dat[,"no.repeat.id"]
# return(complete.dat)
# #bind the index and no.repeat.id. as rows
# temp.dat<-do.call(rbind, lapply(temp, data.table::data.table))
# complete.dat<-data.table::as.data.table(dat[temp.dat$index,])
# # complete.dat[,no.repeat.sub.id:=(temp.dat$no.repeat.id)] # add the new subject ID column, with no repetition
# # complete.dat$no.repeat.sub.id<-temp.dat$no.repeat.id
# complete.dat[,"no.repeat.sub.id"]<-temp.dat$no.repeat.id
# return(complete.dat)
}
)
output
output<-
apply(no.repeat.id,2,function(x){
temp<-
lapply(x,function(x_i){ #for each subject
index<-which(sub.id==stringr::word(x_i,1,sep = "\\__")) #index of original data where the subject id appears
cbind(index, "no.repeat.id"=rep(x_i,length(index)))}) #get all observation for this particular subject.
dat_return<-Reduce("rbind",temp)
dat_return$index<-as.numeric(dat_return$index)
dat_return
# temp.dat<-do.call(rbind, lapply(temp, data.frame))
# complete.dat<-dat[temp.dat$index,]
# complete.dat[,"no.repeat.sub.id"]<-temp.dat[,"no.repeat.id"]
# return(complete.dat)
# #bind the index and no.repeat.id. as rows
# temp.dat<-do.call(rbind, lapply(temp, data.table::data.table))
# complete.dat<-data.table::as.data.table(dat[temp.dat$index,])
# # complete.dat[,no.repeat.sub.id:=(temp.dat$no.repeat.id)] # add the new subject ID column, with no repetition
# # complete.dat$no.repeat.sub.id<-temp.dat$no.repeat.id
# complete.dat[,"no.repeat.sub.id"]<-temp.dat$no.repeat.id
# return(complete.dat)
}
)
output
output<-
apply(no.repeat.id,2,function(x){
temp<-
lapply(x,function(x_i){ #for each subject
index<-which(sub.id==stringr::word(x_i,1,sep = "\\__")) #index of original data where the subject id appears
cbind(index, "no.repeat.id"=rep(x_i,length(index)))}) #get all observation for this particular subject.
dat_return<-Reduce("rbind",temp)
dat_return[,"index"]<-as.numeric(dat_return[,"index"])
dat_return
# temp.dat<-do.call(rbind, lapply(temp, data.frame))
# complete.dat<-dat[temp.dat$index,]
# complete.dat[,"no.repeat.sub.id"]<-temp.dat[,"no.repeat.id"]
# return(complete.dat)
# #bind the index and no.repeat.id. as rows
# temp.dat<-do.call(rbind, lapply(temp, data.table::data.table))
# complete.dat<-data.table::as.data.table(dat[temp.dat$index,])
# # complete.dat[,no.repeat.sub.id:=(temp.dat$no.repeat.id)] # add the new subject ID column, with no repetition
# # complete.dat$no.repeat.sub.id<-temp.dat$no.repeat.id
# complete.dat[,"no.repeat.sub.id"]<-temp.dat$no.repeat.id
# return(complete.dat)
}
)
output
temp<-
lapply(x,function(x_i){ #for each subject
index<-which(sub.id==stringr::word(x_i,1,sep = "\\__")) #index of original data where the subject id appears
cbind(index, "no.repeat.id"=rep(x_i,length(index)))}) #get all observation for this particular subject.
dat_return<-Reduce("rbind",temp)
dat_return
dat_return[,"index"]
as.numeric(dat_return[,"index"])
dat_return[,"index"]<-as.numeric(dat_return[,"index"])
dat_return
dat_return<-data.table::as.data.table(dat_return)
dat_return[,index]<-as.numeric(dat_return[,index])
dat_return[,"index"]<-as.numeric(dat_return[,"index"])
dat_return[,index=as.nuemric(index)]
dat_return
dat_return[,index:=as.nuemric(index)]
dat_return[,index:=as.numeric(index)]
dat_return
output<-
apply(no.repeat.id,2,function(x){
temp<-
lapply(x,function(x_i){ #for each subject
index<-which(sub.id==stringr::word(x_i,1,sep = "\\__")) #index of original data where the subject id appears
cbind(index, "no.repeat.id"=rep(x_i,length(index)))}) #get all observation for this particular subject.
dat_return<-Reduce("rbind",temp)
dat_return<-data.table::as.data.table(dat_return)
dat_return[,index:=as.numeric(index)]
dat_return
# temp.dat<-do.call(rbind, lapply(temp, data.frame))
# complete.dat<-dat[temp.dat$index,]
# complete.dat[,"no.repeat.sub.id"]<-temp.dat[,"no.repeat.id"]
# return(complete.dat)
# #bind the index and no.repeat.id. as rows
# temp.dat<-do.call(rbind, lapply(temp, data.table::data.table))
# complete.dat<-data.table::as.data.table(dat[temp.dat$index,])
# # complete.dat[,no.repeat.sub.id:=(temp.dat$no.repeat.id)] # add the new subject ID column, with no repetition
# # complete.dat$no.repeat.sub.id<-temp.dat$no.repeat.id
# complete.dat[,"no.repeat.sub.id"]<-temp.dat$no.repeat.id
# return(complete.dat)
}
)
output
output<-
apply(no.repeat.id,2,function(x){
temp<-
lapply(x,function(x_i){ #for each subject
index<-which(sub.id==stringr::word(x_i,1,sep = "\\__")) #index of original data where the subject id appears
cbind(index, "no.repeat.id"=rep(x_i,length(index)))}) #get all observation for this particular subject.
#####Return just index and new naming#####
# dat_return<-Reduce("rbind",temp)
# dat_return<-data.table::as.data.table(dat_return)
# dat_return[,index:=as.numeric(index)]
# dat_return
##########################################
temp.dat<-do.call(rbind, lapply(temp, data.frame))
complete.dat<-dat[temp.dat$index,]
complete.dat[,"no.repeat.sub.id"]<-temp.dat[,"no.repeat.id"]
return(complete.dat)
# #bind the index and no.repeat.id. as rows
# temp.dat<-do.call(rbind, lapply(temp, data.table::data.table))
# complete.dat<-data.table::as.data.table(dat[temp.dat$index,])
# # complete.dat[,no.repeat.sub.id:=(temp.dat$no.repeat.id)] # add the new subject ID column, with no repetition
# # complete.dat$no.repeat.sub.id<-temp.dat$no.repeat.id
# complete.dat[,"no.repeat.sub.id"]<-temp.dat$no.repeat.id
# return(complete.dat)
}
)
output
library(boots.lmer)
lmer.out[[27]]
set.seed(1020)
example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
"X1"=rpois(n=length(example.subject), lambda = 3),
"X2"=rnorm(n=length(example.subject)),
"X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5)+rnorm(length(example.subject), mean=6),
"subjects"=example.subject) #generate example data
output<-boots.samples(dat=example.dat,sub.id ="subjects",B=4) #a list of 4 bootstrap samples
lmer.out<-boots.lmer(y="Y", X=c("X1","X2","X3"), boots.samples.list = output)
lmer.out
set.seed(1204)
output<-boots.samples(dat=example.dat,sub.id ="subjects",B=100)#change back to 5000 later
lmer.out<-boots.lmer(y="Y", X=c("X1","X2","X3"), boots.samples.list = output)
coef.out<-
lapply(lmer.out,function(fit){
if(class(fit)=="lm"){ #If linear model was fit, use below function
coef(fit)
}else{ #IF
lme4::fixef(fit)
}
})
#extract coefficient estimate for X3
this.X3<-
lapply(coef.out,function(x){
x["X3"]
})
est.X3<-unlist(this.X3)
#Here the number of NA's
sum(is.na(est.X3))
#index of all whose estimated effect of X3 is NA
which(is.na(est.X3))
lmer.out[[27]]
str(lmer.out)
names(lmer.out)
names(lmer.out[[27]])
class(lmer.out[[27]])
lmer.out[[27]]@optinfo
lmer.out[[27]]@pp
lmer.out[[27]]@resp
lmer.out[[27]]@cnms
?lme4::lmer
lmer.out[[27]]
coefs(lmer.out[[27]])
coef(lmer.out[[27]])
fixef(lmer.out[[27]])
fixef(summary(lmer.out[[27]]))
sapply(lmer.out, function(i) ncol(coef(i)[[1]]))
sapply(lmer.out, function(i) if (inherits(i, "lm")) length(coef) else ncol(coef(i)[[1]]))
#' @examples
#' example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
#' example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
#'                         "X1"=rpois(n=length(example.subject), lambda = 3),
#'                         "X2"=rnorm(n=length(example.subject)),
#'                         "X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
#'                         "subjects"=example.subject)
#' output<-boots.samples(dat=example.dat,sub.id = "subjects",B=4) #create 4 bootstrap samples
#' output[[1]] #This is the first one!
#' @export
boots.samples<-function(dat, sub.id,B){
sub.id<-dat[,sub.id]
#collect unique subject ID's
unique.id<-unique(sub.id)
#sample unique subject ID, B number of times
this.index<-sapply(1:B,function(e){sample(unique.id, size = length(unique.id),replace = TRUE)})
#we need to take a note of people who are sampled more than once to make sure that they are sampled from the data as if they are different individuals.
no.repeat.id<-
apply(this.index,2, function(x){
temp<-table(x)
for(i in seq_along(temp)){
if(temp[i]>1){ #if the subject id appears more than once
num.appearance<-temp[i] #number of times the subject appears in the sample
x[which(x==names(temp)[i])]<-paste0(names(temp)[i],"__",1:num.appearance) #generate new subject ID by concatenating "_#" at the end of the id. Replace the old name with this
}
}
x #return the list of sampled subject ID , now all sample should be unique subject ID.
})
output<-
apply(no.repeat.id,2,function(x){
temp<-
lapply(x,function(x_i){ #for each subject
index<-which(sub.id==stringr::word(x_i,1,sep = "\\__")) #index of original data where the subject id appears
cbind(index, "no.repeat.id"=rep(x_i,length(index)))}) #get all observation for this particular subject.
#####Return just index and new naming#####
dat_return<-Reduce("rbind",temp)
dat_return<-data.table::as.data.table(dat_return)
dat_return[,index:=as.numeric(index)]
dat_return
##########################################
###### return data frame ######
# temp.dat<-do.call(rbind, lapply(temp, data.frame))
# complete.dat<-dat[temp.dat$index,]
# complete.dat[,"no.repeat.sub.id"]<-temp.dat[,"no.repeat.id"]
# return(complete.dat)
##########################################
# #bind the index and no.repeat.id. as rows
# temp.dat<-do.call(rbind, lapply(temp, data.table::data.table))
# complete.dat<-data.table::as.data.table(dat[temp.dat$index,])
# # complete.dat[,no.repeat.sub.id:=(temp.dat$no.repeat.id)] # add the new subject ID column, with no repetition
# # complete.dat$no.repeat.sub.id<-temp.dat$no.repeat.id
# complete.dat[,"no.repeat.sub.id"]<-temp.dat$no.repeat.id
# return(complete.dat)
}
)
output
}
example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
"X1"=rpois(n=length(example.subject), lambda = 3),
"X2"=rnorm(n=length(example.subject)),
"X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
"subjects"=example.subject)
output<-boots.samples(dat=example.dat,sub.id = "subjects",B=4) #create 4 bootstrap samples
output
str(output[[4]])
summary(output)
#' @examples
#' example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
#' example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
#'                         "X1"=rpois(n=length(example.subject), lambda = 3),
#'                         "X2"=rnorm(n=length(example.subject)),
#'                         "X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
#'                         "subjects"=example.subject)
#' output<-boots.samples(dat=example.dat,sub.id = "subjects",B=4) #create 4 bootstrap samples
#' lmer.out<-boots.lmer(y="Y", X=c("X1","X2","X3"), dat=example.dat, boots.samples.list = output)
#' @export
boots.lmer<-function(y,X,dat,boots.samples.list,use.formula=NULL, num_workers=NULL){
lmer.fit<-function(y,X,dat,use.formula=NULL){#a function that fits one LMER
if(is.null(use.formula)){#if we are not provided with specific formula, then create our own
X.names<-lapply(X, as.name)
if(length(X)>1){
X.names<-paste(X.names, collapse=" + ")
X.formula<-as.formula(paste0("~ ", paste(X.names, collapse=" + ")))
}
if(length(unique(dat$no.repeat.sub.id))==nrow(dat)){ #If no subjects are repeating, no need to fit LMER, use LM.
use.formula<-formula(paste0("`",rlang::quo_name(y),"`",rlang::quo_name(X.formula)))
lm(use.formula,data=dat)
}else{
use.formula<-formula(paste0("`",rlang::quo_name(y),"`",rlang::quo_name(X.formula),"+(1|no.repeat.sub.id)"))
lme4::lmer(use.formula,data=dat, REML=FALSE)
}
}else{ #If we are provided with formula....
lme4::lmer(use.formula,data=dat, REML=FALSE)
}
}
if(is.null(num_workers)){
#CRAN limits the number of cores available to packages to 2, for performance reasons. There was a thread in the mailing list, I believe, but I can't find it right now.
chk <- Sys.getenv("_R_CHECK_LIMIT_CORES_", "")
if (nzchar(chk) && chk == "TRUE") {
# use 2 cores in CRAN/Travis/AppVeyor
num_workers <- 2L
} else {
# use all cores in devtools::test()
num_workers <- parallel::detectCores()
}
}
parallel::mclapply(boots.samples.list,function(boots.dat){
#Convert to data table to save time
lmer.fit(y=y,X=X,dat=boots.dat)}
,mc.cores = num_workers)
}
lmer.out<-boots.lmer(y="Y", X=c("X1","X2","X3"), dat=example.dat,boots.samples.list = output)
lmer.out<-boots.lmer(y="Y", X=c("X1","X2","X3"), dat=example.dat,boots.samples.list = output)
