y<-y[index]
X<-as.matrix(X[index,])
fit<-lme4::lmer(y~X+(1|no.repeat.id), REML=FALSE)
return(fit)
}
#CRAN limits the number of cores available to packages to 2, for performance reasons. There was a thread in the mailing list, I believe, but I can't find it right now.
chk <- Sys.getenv("_R_CHECK_LIMIT_CORES_", "")
if (nzchar(chk) && chk == "TRUE") {
# use 2 cores in CRAN/Travis/AppVeyor
num_workers <- 2L
} else {
# use all cores in devtools::test()
num_workers <- parallel::detectCores()
}
parallel::mclapply(boots.samples.list,function(boots.dat){
lmer.fit(y=y,X=X, no.repeat.id=boots.dat[,"no.repeat.id"],index=boots.dat[,"index"])}
,mc.cores = num_workers)
}
tester(y="Y",X=c("X1","X2","X3"),tt[[1]])
tt<-boots.samples(dat = example.dat, sub.id = "subjects",B=4)
tt
tt[[1]]
model_formula1
lme4::lmer(Y~X1+X2+X3+(1|no.repeat.id),data=tt[[1]], REML=FALSE)
View(tt[[1]])
dat<-tt[[1]]
tester<-function(y,X,dat){#a function that fits one LMER
#Make sure we use backtick quotes in case the names have spaces and special characters
X.names<-lapply(X, as.name)
#If we have more than one covariate, concatenate them with +
if(length(X)>1){
X.names<-paste(X.names, collapse=" + ")
X.formula<-as.formula(paste0("~ ", paste(X.names, collapse=" + ")))
}
# model_formula1<-formula(paste0("`",rlang::quo_name(y),"`", "~", "`",rlang::quo_name(X),"` +no.repeat.id"))
model_formula1<-formula(paste0("`",rlang::quo_name(y),"`", "~", rlang::quo_name(X.names),"+(1|no.repeat.id)"))
# return(lme4::lmer(model_formula1,data=dat, REML=FALSE))
}
tester(y="Y",X=c("X1","X2","X3"),tt[[1]])
tester<-function(y,X,dat){#a function that fits one LMER
#Make sure we use backtick quotes in case the names have spaces and special characters
X.names<-lapply(X, as.name)
#If we have more than one covariate, concatenate them with +
if(length(X)>1){
X.names<-paste(X.names, collapse=" + ")
X.formula<-as.formula(paste0("~ ", paste(X.names, collapse=" + ")))
}
# model_formula1<-formula(paste0("`",rlang::quo_name(y),"`", "~", "`",rlang::quo_name(X),"` +no.repeat.id"))
model_formula1<-formula(paste0("`",rlang::quo_name(y),"`", "~", rlang::quo_name(X.names),"+(1|no.repeat.id)"))
print(model_formula1)
# return(lme4::lmer(model_formula1,data=dat, REML=FALSE))
}
tester(y="Y",X=c("X1","X2","X3"),tt[[1]])
model_formula1<-formula("Y ~ X1 + X2 + X3 + (1 | no.repeat.id)")
model_formula1
dat[,lme4::lmer(model_formula1)]
dat[,lme4::lmer(Y ~ X1 + X2 + X3 + (1 | no.repeat.id))]
dat[,lm(Y ~ X1 + X2 + X3)]
head(dat)
tester<-function(y,X,dat){#a function that fits one LMER
#Make sure we use backtick quotes in case the names have spaces and special characters
X.names<-lapply(X, as.name)
#If we have more than one covariate, concatenate them with +
if(length(X)>1){
X.names<-paste(X.names, collapse=" + ")
X.formula<-as.formula(paste0("~ ", paste(X.names, collapse=" + ")))
}
# model_formula1<-formula(paste0("`",rlang::quo_name(y),"`", "~", "`",rlang::quo_name(X),"` +no.repeat.id"))
model_formula1<-formula(paste0("`",rlang::quo_name(y),"`", "~", rlang::quo_name(X.names),"+(1|no.repeat.sub.id)"))
dat[,lme4::lmer(model_formula1,data=dat, REML=FALSE)]
# print(model_formula1)
# return(lme4::lmer(model_formula1,data=dat, REML=FALSE))
}
tester(y="Y",X=c("X1","X2","X3"),tt[[1]])
boots.lmer<-function(y,X,boots.samples.list){
lmer.fit<-function(y,X,dat){#a function that fits one LMER
#Make sure we use backtick quotes in case the names have spaces and special characters
X.names<-lapply(X, as.name)
#If we have more than one covariate, concatenate them with +
if(length(X)>1){
X.names<-paste(X.names, collapse=" + ")
X.formula<-as.formula(paste0("~ ", paste(X.names, collapse=" + ")))
}
model_formula1<-formula(paste0("`",rlang::quo_name(y),"`", "~", rlang::quo_name(X.names),"+(1|no.repeat.sub.id)"))
dat[,lme4::lmer(model_formula1,data=dat, REML=FALSE)]
}
#CRAN limits the number of cores available to packages to 2, for performance reasons. There was a thread in the mailing list, I believe, but I can't find it right now.
chk <- Sys.getenv("_R_CHECK_LIMIT_CORES_", "")
if (nzchar(chk) && chk == "TRUE") {
# use 2 cores in CRAN/Travis/AppVeyor
num_workers <- 2L
} else {
# use all cores in devtools::test()
num_workers <- parallel::detectCores()
}
parallel::mclapply(boots.samples.list,function(boots.dat){
lmer.fit(y=y,X=X,dat=boots.dat)}
,mc.cores = num_workers)
}
temp.out<-boots.lmer(y="Y", X=c("X1","X2","X3"), boots.samples.list = tt)
temp.out
set.seed(1020)
example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
"X1"=rpois(n=length(example.subject), lambda = 3),
"X2"=rnorm(n=length(example.subject)),
"X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
"subjects"=example.subject)
knitr::kable(example.dat, caption = "Table 1. Example data set.")
output<-boots.samples(sub.id = "subjects",B=4)
#' @examples
#' example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
#' example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
#'                         "X1"=rpois(n=length(example.subject), lambda = 3),
#'                         "X2"=rnorm(n=length(example.subject)),
#'                         "X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
#'                         "subjects"=example.subject)
#' output<-boots.samples(dat=example.dat,sub.id = "subjects",B=4) #create 4 bootstrap samples
#' output[[1]] #This is the first one!
#' @export
boots.samples<-function(dat, sub.id,B){
sub.id<-dat[,sub.id]
#collect unique subject ID's
unique.id<-unique(sub.id)
#sample unique subject ID, B number of times
this.index<-sapply(1:B,function(e){sample(unique.id, size = length(unique.id),replace = TRUE)})
#we need to take a note of people who are sampled more than once to make sure that they are sampled from the data as if they are different individuals.
no.repeat.id<-
apply(this.index,2, function(x){
temp<-table(x)
for(i in seq_along(temp)){
if(temp[i]>1){ #if the subject id appears more than once
num.appearance<-temp[i] #number of times the subject appears in the sample
x[which(x==names(temp)[i])]<-paste0(names(temp)[i],"__",1:num.appearance) #generate new subject ID by concatenating "_#" at the end of the id. Replace the old name with this
}
}
x #return the list of sampled subject ID , now all sample should be unique subject ID.
})
#now sample the index of subject ID.
# output<-
#   apply(no.repeat.id,2,function(x){
#     temp<-
#       sapply(x,function(x_i){ #for each subject
#         index<-which(sub.id==stringr::word(x_i,1,sep = "\\__")) #index of original data where the subject id appears
#         cbind(index, "no.repeat.id"=rep(x_i,length(index)))})
#
#     #If length(sub.id)!=length(unique.id), then temp is a list of length(unique.id). Each list is for each unique id. rbind those list.
#     if(is.list(temp)){
#       do.call(rbind, lapply(temp, data.frame))
#     }else{#If length(sub.id)==length(unique.id), temp will be a matrix of ncol=length(unique.id). Transpose it so that the columns are index and no.repeat.id.
#       temp<-t(temp)
#       colnames(temp)<-c("index","no.repeat.id")
#       data.frame(temp)
#     }
#
#   }
#   )
output<-
apply(no.repeat.id,2,function(x){
temp<-
sapply(x,function(x_i){ #for each subject
index<-which(sub.id==stringr::word(x_i,1,sep = "\\__")) #index of original data where the subject id appears
cbind(index, "no.repeat.id"=rep(x_i,length(index)))})
#bind the index and no.repeat.id. as rows
temp.dat<-do.call(rbind, lapply(temp, data.table::data.table))
complete.dat<-data.table::as.data.table(dat[temp.dat$index,])
# complete.dat<-complete.dat[,!..sub.id] #remove the original subject ID
complete.dat[,no.repeat.sub.id:=temp.dat$no.repeat.id] # add the new subject ID column, with no repetition
}
)
output
}
output<-boots.samples(dat=example.dat,sub.id = "subjects",B=4)
knitr::kable(output,caption = "Table 2. Four boostrap samples of example.dat data sets. The sampling unit is subject, hence the number of rows of each data set is expected to be different from one another.",row.names = FALSE)
knitr::kable(output[[1]],caption = "Table 2.A. The first bootstrap sample",row.names = FALSE)
devtools::document
devtools::document()
library(boots.lmer)
#' @examples
#' example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
#' example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
#'                         "X1"=rpois(n=length(example.subject), lambda = 3),
#'                         "X2"=rnorm(n=length(example.subject)),
#'                         "X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
#'                         "subjects"=example.subject)
#' output<-boots.samples(dat=example.dat,sub.id = "subjects",B=4) #create 4 bootstrap samples
#' output[[1]] #This is the first one!
#' @export
boots.samples<-function(dat, sub.id,B){
library(data.table)
sub.id<-dat[,sub.id]
#collect unique subject ID's
unique.id<-unique(sub.id)
#sample unique subject ID, B number of times
this.index<-sapply(1:B,function(e){sample(unique.id, size = length(unique.id),replace = TRUE)})
#we need to take a note of people who are sampled more than once to make sure that they are sampled from the data as if they are different individuals.
no.repeat.id<-
apply(this.index,2, function(x){
temp<-table(x)
for(i in seq_along(temp)){
if(temp[i]>1){ #if the subject id appears more than once
num.appearance<-temp[i] #number of times the subject appears in the sample
x[which(x==names(temp)[i])]<-paste0(names(temp)[i],"__",1:num.appearance) #generate new subject ID by concatenating "_#" at the end of the id. Replace the old name with this
}
}
x #return the list of sampled subject ID , now all sample should be unique subject ID.
})
#now sample the index of subject ID.
# output<-
#   apply(no.repeat.id,2,function(x){
#     temp<-
#       sapply(x,function(x_i){ #for each subject
#         index<-which(sub.id==stringr::word(x_i,1,sep = "\\__")) #index of original data where the subject id appears
#         cbind(index, "no.repeat.id"=rep(x_i,length(index)))})
#
#     #If length(sub.id)!=length(unique.id), then temp is a list of length(unique.id). Each list is for each unique id. rbind those list.
#     if(is.list(temp)){
#       do.call(rbind, lapply(temp, data.frame))
#     }else{#If length(sub.id)==length(unique.id), temp will be a matrix of ncol=length(unique.id). Transpose it so that the columns are index and no.repeat.id.
#       temp<-t(temp)
#       colnames(temp)<-c("index","no.repeat.id")
#       data.frame(temp)
#     }
#
#   }
#   )
output<-
apply(no.repeat.id,2,function(x){
temp<-
sapply(x,function(x_i){ #for each subject
index<-which(sub.id==stringr::word(x_i,1,sep = "\\__")) #index of original data where the subject id appears
cbind(index, "no.repeat.id"=rep(x_i,length(index)))})
#bind the index and no.repeat.id. as rows
temp.dat<-do.call(rbind, lapply(temp, data.table::data.table))
complete.dat<-data.table::as.data.table(dat[temp.dat$index,])
# complete.dat<-complete.dat[,!..sub.id] #remove the original subject ID
complete.dat[,no.repeat.sub.id:=temp.dat$no.repeat.id] # add the new subject ID column, with no repetition
}
)
output
}
example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
"X1"=rpois(n=length(example.subject), lambda = 3),
"X2"=rnorm(n=length(example.subject)),
"X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
"subjects"=example.subject)
tt<-boots.samples(dat = example.dat, sub.id = "subjects",B=4)
tt
help(":=")
DT = data.table(a = LETTERS[c(3L,1:3)], b = 4:7)
DT
DT[, c := 8]                # add a numeric column, 8 for all rows
#' @examples
#' example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
#' example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
#'                         "X1"=rpois(n=length(example.subject), lambda = 3),
#'                         "X2"=rnorm(n=length(example.subject)),
#'                         "X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
#'                         "subjects"=example.subject)
#' output<-boots.samples(dat=example.dat,sub.id = "subjects",B=4) #create 4 bootstrap samples
#' output[[1]] #This is the first one!
#' @export
boots.samples<-function(dat, sub.id,B){
library(data.table)
sub.id<-dat[,sub.id]
#collect unique subject ID's
unique.id<-unique(sub.id)
#sample unique subject ID, B number of times
this.index<-sapply(1:B,function(e){sample(unique.id, size = length(unique.id),replace = TRUE)})
#we need to take a note of people who are sampled more than once to make sure that they are sampled from the data as if they are different individuals.
no.repeat.id<-
apply(this.index,2, function(x){
temp<-table(x)
for(i in seq_along(temp)){
if(temp[i]>1){ #if the subject id appears more than once
num.appearance<-temp[i] #number of times the subject appears in the sample
x[which(x==names(temp)[i])]<-paste0(names(temp)[i],"__",1:num.appearance) #generate new subject ID by concatenating "_#" at the end of the id. Replace the old name with this
}
}
x #return the list of sampled subject ID , now all sample should be unique subject ID.
})
output<-
apply(no.repeat.id,2,function(x){
temp<-
sapply(x,function(x_i){ #for each subject
index<-which(sub.id==stringr::word(x_i,1,sep = "\\__")) #index of original data where the subject id appears
cbind(index, "no.repeat.id"=rep(x_i,length(index)))}) #get all observation for this particular subject.
#bind the index and no.repeat.id. as rows
temp.dat<-do.call(rbind, lapply(temp, data.table::data.table))
complete.dat<-data.table::as.data.table(dat[temp.dat$index,])
complete.dat[,no.repeat.sub.id=(temp.dat$no.repeat.id)] # add the new subject ID column, with no repetition
}
)
output
}
library(boots.lmer)
#' @examples
#' example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
#' example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
#'                         "X1"=rpois(n=length(example.subject), lambda = 3),
#'                         "X2"=rnorm(n=length(example.subject)),
#'                         "X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
#'                         "subjects"=example.subject)
#' output<-boots.samples(dat=example.dat,sub.id = "subjects",B=4) #create 4 bootstrap samples
#' output[[1]] #This is the first one!
#' @export
boots.samples<-function(dat, sub.id,B){
library(data.table)
sub.id<-dat[,sub.id]
#collect unique subject ID's
unique.id<-unique(sub.id)
#sample unique subject ID, B number of times
this.index<-sapply(1:B,function(e){sample(unique.id, size = length(unique.id),replace = TRUE)})
#we need to take a note of people who are sampled more than once to make sure that they are sampled from the data as if they are different individuals.
no.repeat.id<-
apply(this.index,2, function(x){
temp<-table(x)
for(i in seq_along(temp)){
if(temp[i]>1){ #if the subject id appears more than once
num.appearance<-temp[i] #number of times the subject appears in the sample
x[which(x==names(temp)[i])]<-paste0(names(temp)[i],"__",1:num.appearance) #generate new subject ID by concatenating "_#" at the end of the id. Replace the old name with this
}
}
x #return the list of sampled subject ID , now all sample should be unique subject ID.
})
output<-
apply(no.repeat.id,2,function(x){
temp<-
sapply(x,function(x_i){ #for each subject
index<-which(sub.id==stringr::word(x_i,1,sep = "\\__")) #index of original data where the subject id appears
cbind(index, "no.repeat.id"=rep(x_i,length(index)))}) #get all observation for this particular subject.
#bind the index and no.repeat.id. as rows
temp.dat<-do.call(rbind, lapply(temp, data.table::data.table))
complete.dat<-data.table::as.data.table(dat[temp.dat$index,])
complete.dat[,no.repeat.sub.id=(temp.dat$no.repeat.id)] # add the new subject ID column, with no repetition
}
)
output
}
example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
"X1"=rpois(n=length(example.subject), lambda = 3),
"X2"=rnorm(n=length(example.subject)),
"X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
"subjects"=example.subject)
tt<-boots.samples(dat = example.dat, sub.id = "subjects",B=4)
tt<-boots.samples(dat = example.dat, sub.id = "subjects",B=4)
#' @examples
#' example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
#' example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
#'                         "X1"=rpois(n=length(example.subject), lambda = 3),
#'                         "X2"=rnorm(n=length(example.subject)),
#'                         "X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
#'                         "subjects"=example.subject)
#' output<-boots.samples(dat=example.dat,sub.id = "subjects",B=4) #create 4 bootstrap samples
#' output[[1]] #This is the first one!
#' @export
boots.samples<-function(dat, sub.id,B){
library(data.table)
sub.id<-dat[,sub.id]
#collect unique subject ID's
unique.id<-unique(sub.id)
#sample unique subject ID, B number of times
this.index<-sapply(1:B,function(e){sample(unique.id, size = length(unique.id),replace = TRUE)})
#we need to take a note of people who are sampled more than once to make sure that they are sampled from the data as if they are different individuals.
no.repeat.id<-
apply(this.index,2, function(x){
temp<-table(x)
for(i in seq_along(temp)){
if(temp[i]>1){ #if the subject id appears more than once
num.appearance<-temp[i] #number of times the subject appears in the sample
x[which(x==names(temp)[i])]<-paste0(names(temp)[i],"__",1:num.appearance) #generate new subject ID by concatenating "_#" at the end of the id. Replace the old name with this
}
}
x #return the list of sampled subject ID , now all sample should be unique subject ID.
})
output<-
apply(no.repeat.id,2,function(x){
temp<-
sapply(x,function(x_i){ #for each subject
index<-which(sub.id==stringr::word(x_i,1,sep = "\\__")) #index of original data where the subject id appears
cbind(index, "no.repeat.id"=rep(x_i,length(index)))}) #get all observation for this particular subject.
#bind the index and no.repeat.id. as rows
temp.dat<-do.call(rbind, lapply(temp, data.table::data.table))
complete.dat<-data.table::as.data.table(dat[temp.dat$index,])
complete.dat[,no.repeat.sub.id:=(temp.dat$no.repeat.id)] # add the new subject ID column, with no repetition
}
)
output
}
#' @examples
#' example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
#' example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
#'                         "X1"=rpois(n=length(example.subject), lambda = 3),
#'                         "X2"=rnorm(n=length(example.subject)),
#'                         "X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
#'                         "subjects"=example.subject)
#' output<-boots.samples(dat=example.dat,sub.id = "subjects",B=4) #create 4 bootstrap samples
#' output[[1]] #This is the first one!
#' @export
boots.samples<-function(dat, sub.id,B){
sub.id<-dat[,sub.id]
#collect unique subject ID's
unique.id<-unique(sub.id)
#sample unique subject ID, B number of times
this.index<-sapply(1:B,function(e){sample(unique.id, size = length(unique.id),replace = TRUE)})
#we need to take a note of people who are sampled more than once to make sure that they are sampled from the data as if they are different individuals.
no.repeat.id<-
apply(this.index,2, function(x){
temp<-table(x)
for(i in seq_along(temp)){
if(temp[i]>1){ #if the subject id appears more than once
num.appearance<-temp[i] #number of times the subject appears in the sample
x[which(x==names(temp)[i])]<-paste0(names(temp)[i],"__",1:num.appearance) #generate new subject ID by concatenating "_#" at the end of the id. Replace the old name with this
}
}
x #return the list of sampled subject ID , now all sample should be unique subject ID.
})
output<-
apply(no.repeat.id,2,function(x){
temp<-
sapply(x,function(x_i){ #for each subject
index<-which(sub.id==stringr::word(x_i,1,sep = "\\__")) #index of original data where the subject id appears
cbind(index, "no.repeat.id"=rep(x_i,length(index)))}) #get all observation for this particular subject.
#bind the index and no.repeat.id. as rows
temp.dat<-do.call(rbind, lapply(temp, data.table::data.table))
complete.dat<-data.table::as.data.table(dat[temp.dat$index,])
complete.dat[,no.repeat.sub.id:=(temp.dat$no.repeat.id)] # add the new subject ID column, with no repetition
}
)
output
}
tt<-boots.samples(dat = example.dat, sub.id = "subjects",B=4)
tt
#' @examples
#' example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
#' example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
#'                         "X1"=rpois(n=length(example.subject), lambda = 3),
#'                         "X2"=rnorm(n=length(example.subject)),
#'                         "X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
#'                         "subjects"=example.subject)
#' output<-boots.samples(dat=example.dat,sub.id = "subjects",B=4) #create 4 bootstrap samples
#' output[[1]] #This is the first one!
#' @export
boots.samples<-function(dat, sub.id,B){
sub.id<-dat[,sub.id]
#collect unique subject ID's
unique.id<-unique(sub.id)
#sample unique subject ID, B number of times
this.index<-sapply(1:B,function(e){sample(unique.id, size = length(unique.id),replace = TRUE)})
#we need to take a note of people who are sampled more than once to make sure that they are sampled from the data as if they are different individuals.
no.repeat.id<-
apply(this.index,2, function(x){
temp<-table(x)
for(i in seq_along(temp)){
if(temp[i]>1){ #if the subject id appears more than once
num.appearance<-temp[i] #number of times the subject appears in the sample
x[which(x==names(temp)[i])]<-paste0(names(temp)[i],"__",1:num.appearance) #generate new subject ID by concatenating "_#" at the end of the id. Replace the old name with this
}
}
x #return the list of sampled subject ID , now all sample should be unique subject ID.
})
output<-
apply(no.repeat.id,2,function(x){
temp<-
sapply(x,function(x_i){ #for each subject
index<-which(sub.id==stringr::word(x_i,1,sep = "\\__")) #index of original data where the subject id appears
cbind(index, "no.repeat.id"=rep(x_i,length(index)))}) #get all observation for this particular subject.
#bind the index and no.repeat.id. as rows
temp.dat<-do.call(rbind, lapply(temp, data.table::data.table))
complete.dat<-data.table::as.data.table(dat[temp.dat$index,])
complete.dat[,no.repeat.sub.id=(temp.dat$no.repeat.id)] # add the new subject ID column, with no repetition
}
)
output
}
tt<-boots.samples(dat = example.dat, sub.id = "subjects",B=4)
library(boots.lmer)
output<-boots.samples(dat=example.dat,sub.id = "subjects",B=4)
devtools::use_package( "data.table", pkg = "." )
usethis::use_package( "data.table", pkg = "." )
?usethis::use_package
usethis::use_package( "data.table")
getwd()
library(boots.lmer)
library(boots.lmer)
library(boots.lmer)
library(boots.lmer)
library(boots.lmer)
library(boots.lmer)
?boots.lmer::boots.samples
example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
"X1"=rpois(n=length(example.subject), lambda = 3),
"X2"=rnorm(n=length(example.subject)),
"X3"=rbeta(n=length(example.subject), shape1 = 3, shape2 = 0.5),
"subjects"=example.subject)
output<-boots.samples(dat=example.dat,sub.id = "subjects",B=4) #create 4 bootstrap samples
output[[1]] #This is the first one!
lmer.out<-boots.lmer(y="Y", X=c("X1","X2","X3"), boots.samples.list = output)
lmer.out
library(boots.lmer)
example.subject<-c("Sarah","John","Beth","Anna","Sarah","Sarah","Chris","Blake","John","Anna")
example.dat<-data.frame("Y"=rnorm(n=length(example.subject)),
"X"=rpois(n=length(example.subject), lambda = 3),
"subjects"=example.subject)
output<-boots.samples(dat=example.dat,sub.id = "subjects",B=4) #create 4 bootstrap samples
lmer.out<-boots.lmer(y="Y", X=c("X1","X2","X3"), boots.samples.list = output)
lmer.out
library(boots.lmer)
library(boots.lmer)
